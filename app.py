import streamlit as st
import pandas as pd
from src.utils.larkbase_api import fetch_larkbase_data, clear_and_overwrite_table
from src.utils.data_process import extract_categories_from_mixed_data, filter_data_by_category

def allocate_quantity_by_moh(df_category, df_products):
    if 'S·ªë l∆∞·ª£ng c·∫ßn' not in df_category.columns:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt 'S·ªë l∆∞·ª£ng c·∫ßn' trong d·ªØ li·ªáu danh m·ª•c! C√°c c·ªôt hi·ªán c√≥: " + ', '.join(df_category.columns))
        return pd.DataFrame(), 0
    if 'T·ªïng l∆∞·ª£ng h√†ng' not in df_products.columns or 'SL b√°n' not in df_products.columns:
        st.error("‚ùå Thi·∫øu c·ªôt 'T·ªïng l∆∞·ª£ng h√†ng' ho·∫∑c 'SL b√°n' trong danh s√°ch s·∫£n ph·∫©m!")
        return pd.DataFrame(), 0

    total_qty = df_category['S·ªë l∆∞·ª£ng c·∫ßn'].sum()
    df_products = df_products.copy()
    df_products['SL ph√¢n b·ªï'] = 0
    df_products['MOH'] = df_products['T·ªïng l∆∞·ª£ng h√†ng'] / df_products['SL b√°n']

    remaining_qty = total_qty
    while remaining_qty > 0:
        df_products = df_products.sort_values(['MOH', 'SL b√°n'], ascending=[True, False]).reset_index(drop=True)
        idx = df_products[(df_products['SL b√°n'] > 0)].index[0]
        df_products.at[idx, 'SL ph√¢n b·ªï'] += 1
        df_products.at[idx, 'T·ªïng l∆∞·ª£ng h√†ng'] += 1
        df_products.at[idx, 'MOH'] = df_products.at[idx, 'T·ªïng l∆∞·ª£ng h√†ng'] / df_products.at[idx, 'SL b√°n']
        remaining_qty -= 1

    df_products.drop(columns=['MOH'], inplace=True)
    return df_products, total_qty

# ================== UI ==================
st.markdown("""
<style>
.stButton>button {
    width: 100%;
    background: #ef5350;
    color: white;
    border: none;
    border-radius: 6px;
    padding: 12px;
    font-weight: 500;
    font-size: 16px;
    font-family: 'Arial', sans-serif;
}
.stButton>button:hover {
    background: #d32f2f;
}
.success-box {
    background: #e8f5e8;
    padding: 16px;
    border-radius: 8px;
    border-left: 4px solid #4caf50;
    margin: 16px 0;
    font-family: 'Arial', sans-serif;
}
.info-box {
    background: #e3f2fd;
    padding: 16px;
    border-radius: 8px;
    border-left: 4px solid #2196f3;
    margin: 16px 0;
    font-family: 'Arial', sans-serif;
}
.category-box {
    background: #fff3e0;
    padding: 16px;
    border-radius: 8px;
    border-left: 4px solid #ff9800;
    margin: 16px 0;
    font-family: 'Arial', sans-serif;
}
.allocation-box {
    background: #f1f8e9;
    padding: 16px;
    border-radius: 8px;
    border-left: 4px solid #8bc34a;
    margin: 16px 0;
    font-family: 'Arial', sans-serif;
}
</style>
""", unsafe_allow_html=True)

st.markdown("""
<div style="text-align: center; padding: 2rem; background: linear-gradient(90deg, #1976d2, #42a5f5); color: white; border-radius: 8px; margin-bottom: 2rem; font-family: 'Arial', sans-serif;">
    <h1>üìä Ph√¢n b·ªï danh m·ª•c</h1>
    <p>Ph√¢n b·ªï s·ªë l∆∞·ª£ng danh m·ª•c ra c√°c m√£ s·∫£n ph·∫©m</p>
</div>
""", unsafe_allow_html=True)

# ========== Kh·ªüi t·∫°o session state ==========
if 'step' not in st.session_state:
    st.session_state.step = 1
if 'df_inventory_overview' not in st.session_state:
    st.session_state.df_inventory_overview = None
if 'df_product_list' not in st.session_state:
    st.session_state.df_product_list = None
if 'selected_category' not in st.session_state:
    st.session_state.selected_category = None
if 'df_allocated' not in st.session_state:
    st.session_state.df_allocated = None
if 'total_allocated_qty' not in st.session_state:
    st.session_state.total_allocated_qty = 0

# ========== B∆∞·ªõc 1: T·∫£i danh m·ª•c ==========
if st.session_state.step >= 1:
    st.markdown("### üéØ B∆∞·ªõc 1: Ch·ªçn danh m·ª•c c·∫ßn x·ª≠ l√Ω")
    st.markdown("*Ch·ªçn danh m·ª•c ƒë·ªÉ l·ªçc d·ªØ li·ªáu cho to√†n b·ªô quy tr√¨nh x·ª≠ l√Ω*")
    if st.session_state.df_inventory_overview is None:
        if st.button("üìÇ T·∫£i danh s√°ch danh m·ª•c", key="load_categories"):
            with st.spinner("ƒêang t·∫£i danh s√°ch danh m·ª•c..."):
                df_raw_data = fetch_larkbase_data("At3fbwyI5a1Ps1srOpxlhkfqgVf", "tblcdexU1Gk6xHOD", "danh m·ª•c c·∫ßn x·ª≠ l√Ω")
                if df_raw_data is not None:
                    st.session_state.df_inventory_overview = df_raw_data
                    st.rerun()
    else:
        if 'M√£ danh m·ª•c' in st.session_state.df_inventory_overview.columns:
            categories = extract_categories_from_mixed_data(st.session_state.df_inventory_overview['M√£ danh m·ª•c'])
            if categories:
                selected_category = st.selectbox(
                    "üè∑Ô∏è Ch·ªçn danh m·ª•c:",
                    options=["-- Ch·ªçn danh m·ª•c --"] + categories,
                    key="category_selector",
                    index=0 if st.session_state.selected_category is None else (categories.index(st.session_state.selected_category) + 1 if st.session_state.selected_category in categories else 0)
                )
                if selected_category != "-- Ch·ªçn danh m·ª•c --":
                    if st.session_state.selected_category != selected_category:
                        st.session_state.selected_category = selected_category
                        st.session_state.df_product_list = None
                        st.session_state.df_allocated = None
                    df_category = filter_data_by_category(st.session_state.df_inventory_overview, 'M√£ danh m·ª•c', selected_category)
                    st.markdown(f'<div class="category-box">üéØ <strong>Danh m·ª•c ƒë√£ ch·ªçn</strong>: {selected_category}</div>', unsafe_allow_html=True)
                    
                    # S·∫Øp x·∫øp v√† ch·ªâ hi·ªán c√°c c·ªôt mong mu·ªën
                    columns_order = [
                        "T√™n danh m·ª•c", "M√£ danh m·ª•c", "Danh m·ª•c cha", "S·ªë l∆∞·ª£ng c·∫ßn", "T·ªïng l∆∞·ª£ng h√†ng",
                        "T·ªìn hi·ªán t·∫°i", "T·ªìn chuy·ªÉn kho", "SL s·∫£n xu·∫•t t√°i", "SL s·∫£n xu·∫•t m·ªõi",
                        "Target SL b√°n th√°ng hi·ªán t·∫°i", "SL b√°n d·ª± ki·∫øn th√°ng hi·ªán t·∫°i", "SL b√°n th√°ng hi·ªán t·∫°i"
                    ]
                    # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong DataFrame
                    columns_show = [col for col in columns_order if col in df_category.columns]
                    df_show = df_category.reindex(columns=columns_show)
                    with st.expander("üìã Xem b·∫£ng d·ªØ li·ªáu danh m·ª•c ƒë√£ ch·ªçn", expanded=True):
                        st.dataframe(df_show, use_container_width=True, column_order=columns_show)
                    
                    # Ch·ªâ hi·ªán n√∫t "Ti·∫øp t·ª•c" n·∫øu ƒëang ·ªü step 1
                    if st.session_state.step == 1:
                        if st.button("Ti·∫øp t·ª•c ‚û°Ô∏è", key="to_step2"):
                            st.session_state.step = 2
                            st.rerun()
                else:
                    st.session_state.selected_category = None
                    st.markdown('<div class="info-box">‚ÑπÔ∏è <strong>Vui l√≤ng ch·ªçn danh m·ª•c ƒë·ªÉ ti·∫øp t·ª•c c√°c b∆∞·ªõc ti·∫øp theo</strong></div>', unsafe_allow_html=True)
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y danh m·ª•c n√†o trong d·ªØ li·ªáu!")
        else:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt 'M√£ danh m·ª•c' trong d·ªØ li·ªáu!")
            st.write("<b>C√°c c·ªôt c√≥ s·∫µn:</b>")
            st.write(list(st.session_state.df_inventory_overview.columns))

# ========== B∆∞·ªõc 2: ƒê·ªçc danh s√°ch s·∫£n ph·∫©m ==========
if st.session_state.step >= 2:
    st.markdown("### üìã B∆∞·ªõc 2: ƒê·ªçc danh s√°ch s·∫£n ph·∫©m")
    st.markdown("*Danh s√°ch chi ti·∫øt c√°c s·∫£n ph·∫©m v√† th√¥ng tin li√™n quan*")
    if st.session_state.df_product_list is None:
        if st.session_state.step == 2:
            if st.button("üîÑ ƒê·ªçc danh s√°ch s·∫£n ph·∫©m", key="step2"):
                with st.spinner("ƒêang ƒë·ªçc danh s√°ch s·∫£n ph·∫©m..."):
                    df_products = fetch_larkbase_data("At3fbwyI5a1Ps1srOpxlhkfqgVf", "tbliknLD9NJDtSeE", "danh s√°ch s·∫£n ph·∫©m")
                    if df_products is not None:
                        st.session_state.df_product_list = df_products
                        st.rerun()
    else:
        st.markdown(f'<div class="success-box">‚úÖ <strong>ƒê√£ c√≥ danh s√°ch s·∫£n ph·∫©m</strong>: {len(st.session_state.df_product_list):,} s·∫£n ph·∫©m</div>', unsafe_allow_html=True)
        with st.expander("üëÄ Xem danh s√°ch s·∫£n ph·∫©m"):
            st.dataframe(st.session_state.df_product_list[['T√™n s·∫£n ph·∫©m','M√†u','MOH','SL b√°n','T·ªïng l∆∞·ª£ng h√†ng','T·ªìn hi·ªán t·∫°i','T·ªìn chuy·ªÉn kho','SL s·∫£n xu·∫•t t√°i','SL s·∫£n xu·∫•t m·ªõi','SL ph√¢n b·ªï','SL ph√¢n b·ªï ƒëi·ªÅu ch·ªânh']].head(), use_container_width=True)
        if st.session_state.step == 2:
            if st.button("Ti·∫øp t·ª•c ‚û°Ô∏è", key="to_step3"):
                st.session_state.step = 3
                st.rerun()

# ========== B∆∞·ªõc 3: Ph√¢n b·ªï s·ªë l∆∞·ª£ng ==========
if st.session_state.step >= 3:
    st.markdown("### üéØ B∆∞·ªõc 3: Ph√¢n b·ªï s·ªë l∆∞·ª£ng")
    st.markdown("*Ph√¢n b·ªï t·ª´ng s·∫£n ph·∫©m cho m√£ c√≥ MOH th·∫•p nh·∫•t*")
    if st.session_state.df_allocated is None:
        if st.session_state.step == 3:
            if st.button("‚ö° Th·ª±c hi·ªán ph√¢n b·ªï s·ªë l∆∞·ª£ng", key="step3"):
                with st.spinner("ƒêang ph√¢n b·ªï s·ªë l∆∞·ª£ng..."):
                    df_filtered_alloc = filter_data_by_category(st.session_state.df_inventory_overview, 'M√£ danh m·ª•c', st.session_state.selected_category)
                    df_allocated, total_qty = allocate_quantity_by_moh(df_filtered_alloc, st.session_state.df_product_list)
                    if not df_allocated.empty:
                        st.session_state.df_allocated = df_allocated
                        st.session_state.total_allocated_qty = total_qty
                        st.rerun()
    else:
        st.markdown(f'<div class="allocation-box">üéØ <strong>Ph√¢n b·ªï ho√†n t·∫•t!</strong><br>‚Ä¢ T·ªïng s·ªë l∆∞·ª£ng: {st.session_state.total_allocated_qty:,}<br>‚Ä¢ S·ªë s·∫£n ph·∫©m: {len(st.session_state.df_allocated):,}<br>‚Ä¢ T·ªïng sau ph√¢n b·ªï: {st.session_state.df_allocated["SL ph√¢n b·ªï"].sum():,}</div>', unsafe_allow_html=True)
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üìä T·ªïng g·ªëc", f"{st.session_state.total_allocated_qty:,}")
        with col2:
            st.metric("üì¶ T·ªïng ph√¢n b·ªï", f"{st.session_state.df_allocated['SL ph√¢n b·ªï'].sum():,}")
        with col3:
            st.metric("üìà Trung b√¨nh", f"{st.session_state.df_allocated['SL ph√¢n b·ªï'].mean():.1f}")
        with col4:
            min_qty = st.session_state.df_allocated['SL ph√¢n b·ªï'].min()
            max_qty = st.session_state.df_allocated['SL ph√¢n b·ªï'].max()
            st.metric("üìä Min-Max", f"{min_qty}-{max_qty}")

        with st.expander("üìã Xem k·∫øt qu·∫£ ph√¢n b·ªï chi ti·∫øt", expanded=True):
            st.dataframe(st.session_state.df_allocated.head(), use_container_width=True)
        
        #csv = st.session_state.df_allocated.to_csv(index=False, encoding='utf-8-sig')
        #st.download_button(label="üíæ T·∫£i xu·ªëng k·∫øt qu·∫£ (CSV)", data=csv, file_name=f"phan_bo_san_pham_{st.session_state.selected_category}_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv", mime="text/csv")

        if st.session_state.step == 3:
            if st.button("Ti·∫øp t·ª•c ‚û°Ô∏è", key="to_step4"):
                st.session_state.step = 4
                st.rerun()

# ========== B∆∞·ªõc 4: Ghi k·∫øt qu·∫£ ==========
if st.session_state.step >= 4:
    st.markdown("### ‚úçÔ∏è B∆∞·ªõc 4: Ghi k·∫øt qu·∫£ v√†o Larkbase")
    st.markdown("*L∆∞u √Ω: H√†nh ƒë·ªông n√†y s·∫Ω **x√≥a to√†n b·ªô d·ªØ li·ªáu c≈©** trong b·∫£ng ƒë√≠ch v√† thay th·∫ø b·∫±ng d·ªØ li·ªáu m·ªõi.*")
    TARGET_APP_TOKEN = "At3fbwyI5a1Ps1srOpxlhkfqgVf"
    TARGET_TABLE_ID = "tbliknLD9NJDtSeE"
    if st.button("üöÄ Ghi ƒë√® k·∫øt qu·∫£ v√†o Larkbase", key="write_to_larkbase"):
        df_to_write = st.session_state.df_allocated
        if df_to_write is not None and not df_to_write.empty:
            with st.spinner(f"ƒêang ghi ƒë√® d·ªØ li·ªáu v√†o b·∫£ng {TARGET_TABLE_ID}..."):
                result = clear_and_overwrite_table(
                    app_token=TARGET_APP_TOKEN,
                    table_id=TARGET_TABLE_ID,
                    new_data=df_to_write,
                    step_name=f"K·∫øt qu·∫£ ph√¢n b·ªï ({st.session_state.selected_category})"
                )
                if result["success"]:
                    st.success(f"‚úÖ {result['message']}")
                else:
                    st.error(f"‚ùå {result['message']}")
        else:
            st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªï ƒë·ªÉ ghi. Vui l√≤ng th·ª±c hi·ªán l·∫°i B∆∞·ªõc 3.")
